{"version":3,"file":"static/js/186.63e82dad.chunk.js","mappings":"+SAEMA,EAAM,mCAML,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,yGAAwBC,EAAxB,+BAA6B,EAA7B,UACoBC,EAAAA,EAAAA,GAAM,mBAAoB,CAAEC,OAAQ,CAAEC,QAASL,EAAKE,KAAAA,KADxE,cACGI,EADH,yBAEIA,EAASC,KAAKC,SAFlB,mEAMA,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAA8BC,EAAOR,GAArC,wFACoBC,EAAAA,EAAAA,GAAM,gBAAiB,CAAEC,OAAQ,CAAEC,QAASL,EAAKE,KAAAA,EAAMQ,MAAAA,KAD3E,cACGJ,EADH,yBAEIA,EAASC,KAAKC,SAFlB,kEAKA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA0BC,GAA1B,wFACoBT,EAAAA,EAAAA,GAAM,UAAD,OAAWS,GAAM,CAAER,OAAQ,CAAEC,QAASL,KAD/D,cACGM,EADH,yBAEIA,EAASC,MAFb,kEAKA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAAwBD,GAAxB,wFACoBT,EAAAA,EAAAA,GAAM,UAAD,OAAWS,EAAX,YAAyB,CAAER,OAAQ,CAAEC,QAASL,KADvE,cACGM,EADH,yBAEIA,EAASC,KAAKO,MAFlB,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA0BH,GAA1B,wFACoBT,EAAAA,EAAAA,GAAM,UAAD,OAAWS,EAAX,YAAyB,CAAER,OAAQ,CAAEC,QAASL,KADvE,cACGM,EADH,yBAEIA,EAASC,KAAKC,SAFlB,kEAzBPL,EAAAA,EAAAA,SAAAA,QADiB,+B,uFC0BjB,UAxBgB,WAEZ,IAAOS,GAAMI,EAAAA,EAAAA,MAANJ,GACP,GAA8BK,EAAAA,EAAAA,YAA9B,eAAOC,EAAP,KAAgBC,EAAhB,KAQA,OANAC,EAAAA,EAAAA,YAAU,YACNL,EAAAA,EAAAA,IAAWH,GACVS,KAAKF,GACLG,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,EAAhB,GACb,GAAE,CAACX,IACJY,QAAQC,IAAIP,GACLA,GAAW,wBACbA,EAAQQ,KAAI,SAAAC,GACT,OACI,2BACI,wBAAKA,EAAOC,UACZ,uBAAID,EAAOE,aAFNC,EAAAA,EAAAA,MAKhB,OACK,oEAEb,C,uDC1BM,IAkBIA,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACvB,EAAIwB,GAWvD,OARExB,IAFFwB,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["Services/MoviesApi.js","components/Reviews/Reviews.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import axios from \"axios\"\n\nconst KEY = '68e3775246544a4b01e0cb7df43b357c'\nconst BASE_URL = 'https://api.themoviedb.org/3/'\naxios.defaults.baseURL = BASE_URL\n\n\n\nexport async function dataLoad(page=1) {\n    const response = await axios(\"trending/all/day\", { params: { api_key: KEY, page } })\n    return response.data.results\n    \n}\n\nexport async function getSearchFilms(query, page) {\n    const response = await axios('/search/movie', { params: { api_key: KEY, page, query } })\n    return response.data.results\n}\n\nexport async function getDetails(id) {\n    const response = await axios(`/movie/${id}`, { params: { api_key: KEY, } })\n    return response.data\n}\n\nexport async function getCasts(id) {\n    const response = await axios(`/movie/${id}/credits`, { params: { api_key: KEY, } })\n    return response.data.cast\n}\n\nexport async function getReviews(id) {\n    const response = await axios(`/movie/${id}/reviews`, { params: { api_key: KEY, } })\n    return response.data.results\n}\n\n","import { nanoid } from 'nanoid'\nimport React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { getReviews } from 'Services/MoviesApi'\n\nconst Reviews = () => {\n\n    const {id} = useParams()\n    const [reviews, setReviews] = useState()\n    \n    useEffect(() => {\n        getReviews(id)\n        .then(setReviews)\n        .catch(err => console.log(err))\n    }, [id])\n    console.log(reviews)\n    return reviews ? (<ul>\n        {reviews.map(review => {\n            return (\n                <li key={nanoid()}>\n                    <h4>{review.author}</h4>\n                    <p>{review.content}</p>\n                </li>\n            )\n        })}\n    </ul>) : (<p>Sorry, we dont have reviews for this film</p>)\n\n}\n\nexport default Reviews","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["KEY","dataLoad","page","axios","params","api_key","response","data","results","getSearchFilms","query","getDetails","id","getCasts","cast","getReviews","useParams","useState","reviews","setReviews","useEffect","then","catch","err","console","log","map","review","author","content","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}