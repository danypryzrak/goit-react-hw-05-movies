{"version":3,"file":"static/js/247.2a85e023.chunk.js","mappings":"+SAEMA,EAAM,mCAML,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,yGAAwBC,EAAxB,+BAA6B,EAA7B,UACoBC,EAAAA,EAAAA,GAAM,mBAAoB,CAAEC,OAAQ,CAAEC,QAASL,EAAKE,KAAAA,KADxE,cACGI,EADH,yBAEIA,EAASC,KAAKC,SAFlB,mEAMA,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAA8BC,EAAOR,GAArC,wFACoBC,EAAAA,EAAAA,GAAM,gBAAiB,CAAEC,OAAQ,CAAEC,QAASL,EAAKE,KAAAA,EAAMQ,MAAAA,KAD3E,cACGJ,EADH,yBAEIA,EAASC,KAAKC,SAFlB,kEAKA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA0BC,GAA1B,wFACoBT,EAAAA,EAAAA,GAAM,UAAD,OAAWS,GAAM,CAAER,OAAQ,CAAEC,QAASL,KAD/D,cACGM,EADH,yBAEIA,EAASC,MAFb,kEAKA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAAwBD,GAAxB,wFACoBT,EAAAA,EAAAA,GAAM,UAAD,OAAWS,EAAX,YAAyB,CAAER,OAAQ,CAAEC,QAASL,KADvE,cACGM,EADH,yBAEIA,EAASC,KAAKO,MAFlB,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA0BH,GAA1B,wFACoBT,EAAAA,EAAAA,GAAM,UAAD,OAAWS,EAAX,YAAyB,CAAER,OAAQ,CAAEC,QAASL,KADvE,cACGM,EADH,yBAEIA,EAASC,KAAKC,SAFlB,kEAzBPL,EAAAA,EAAAA,SAAAA,QADiB,+B,uFC2BjB,UAzBa,WAEb,IAAQS,GAAOI,EAAAA,EAAAA,MAAPJ,GACR,GAA0BK,EAAAA,EAAAA,YAA1B,eAAOC,EAAP,KAAcC,EAAd,KASE,OAPEC,EAAAA,EAAAA,YAAU,YACRP,EAAAA,EAAAA,IAASD,GACRS,KAAKF,GACLG,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,EAAhB,GACX,GAAE,CAACX,IAEJY,QAAQC,IAAIP,GAEVA,IAAS,wBACJA,EAAMQ,KAAI,SAAAZ,GACP,OAAO,2BACH,gBAAKa,IAAG,yCAAoCb,EAAKc,cAAgBC,IAAI,QAAQC,MAAM,MAAMC,OAAO,SAChG,wBAAKjB,EAAKkB,QACV,uCAAelB,EAAKmB,gBAHRC,EAAAA,EAAAA,MAKrB,KAGR,C,uDC3BM,IAkBIA,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAAC3B,EAAI4B,GAWvD,OARE5B,IAFF4B,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["Services/MoviesApi.js","components/Cast/Cast.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import axios from \"axios\"\n\nconst KEY = '68e3775246544a4b01e0cb7df43b357c'\nconst BASE_URL = 'https://api.themoviedb.org/3/'\naxios.defaults.baseURL = BASE_URL\n\n\n\nexport async function dataLoad(page=1) {\n    const response = await axios(\"trending/all/day\", { params: { api_key: KEY, page } })\n    return response.data.results\n    \n}\n\nexport async function getSearchFilms(query, page) {\n    const response = await axios('/search/movie', { params: { api_key: KEY, page, query } })\n    return response.data.results\n}\n\nexport async function getDetails(id) {\n    const response = await axios(`/movie/${id}`, { params: { api_key: KEY, } })\n    return response.data\n}\n\nexport async function getCasts(id) {\n    const response = await axios(`/movie/${id}/credits`, { params: { api_key: KEY, } })\n    return response.data.cast\n}\n\nexport async function getReviews(id) {\n    const response = await axios(`/movie/${id}/reviews`, { params: { api_key: KEY, } })\n    return response.data.results\n}\n\n","import { nanoid } from 'nanoid'\nimport React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { getCasts} from 'Services/MoviesApi'\n\nconst Cast = () => {\n\nconst { id } = useParams()\nconst [casts, setCasts] = useState()\n\n    useEffect(() => {\n      getCasts(id)\n      .then(setCasts)\n      .catch(err => console.log(err))\n    }, [id])\n\n    console.log(casts)\n  return (\n      casts && <ul>\n          {casts.map(cast => {\n              return <li key={nanoid()}>\n                  <img src={`https://image.tmdb.org/t/p/w500${cast.profile_path}`} alt=\"actor\" width='120' height='180'/>\n                  <h4>{cast.name}</h4>\n                  <p>Character: {cast.character}</p>\n            </li>\n        })}\n    </ul>\n  )\n}\n\nexport default Cast;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["KEY","dataLoad","page","axios","params","api_key","response","data","results","getSearchFilms","query","getDetails","id","getCasts","cast","getReviews","useParams","useState","casts","setCasts","useEffect","then","catch","err","console","log","map","src","profile_path","alt","width","height","name","character","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}